<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">tryX = 0
tryY = 0
inputWait -= 1

if gamepadID
{
    leftX = joystick_xpos(gamepadID)// left joystick x
    leftY = joystick_ypos(gamepadID)// left joystick y
    
    rightX = joystick_upos(gamepadID)// right stick y
    rightY = joystick_rpos(gamepadID)// right stick x
}
else
{
    leftX = 0
    leftY = 0
    
    rightX = 0
    rightY = 0
}



if inputWait &lt;= 0
{
    if keyboard_check(ord("W")) || leftY &lt; -deadzone
    {
        tryY += -1
    }
    if keyboard_check(ord("A")) || leftX &lt; -deadzone
    {
        tryX += -1
    }
    
    if keyboard_check(ord("S")) || leftY &gt; deadzone
    {
        tryY += 1
    }
    
    if keyboard_check(ord("D")) || leftX &gt; deadzone
    {
        tryX += 1
    }
}


if tryX != 0 || tryY != 0
{
    newY = y+tryY * 16
    if !instance_place(x, newY, pWall) &amp;&amp; newY &gt; -1 &amp;&amp; newY &lt; room_height - t - 1
    {
        y = newY
        inputWait = inputDelay
    }
    
    newX = x+tryX * 16
    if !instance_place(newX, y, pWall) &amp;&amp; newX &gt; -1 &amp;&amp; newX &lt; room_width-1
    {
        x = newX
        inputWait = inputDelay
    }
}

portal = instance_place(x, y, oPortal)
if portal
{
    portalTime += 1
    if portalTime = 30
        sound_play(soPortal)
    if portalTime = 120
    {
        if instance_place(x,y, oBookPiece)
        {
            bookPieces += 1
            oTracker.won = true
        }
        else
        {
            oTracker.lastPortal = portal
        }
        room_goto(portal.target)
    }
}
else if !portalLock
{
    portalTime = 0
}

shootWait -= 1

gamepadShot = false

if gamepadID
{
    if rightX &gt; deadzone || rightX &lt; -deadzone || rightY &gt; deadzone || rightY &lt; -deadzone
    {
        gamepadShot = true
    }
}

if (mouse_check_button(mb_left) || gamepadShot) &amp;&amp; shootWait &lt;= 0
{
    fireBall = instance_create(x,y,oFireball)
    fireBall.speed = 4
    if gamepadShot
    {
        fireDirection = point_direction(0, 0, rightX, rightY)
        showCursor = false
    }
    else
    {
        fireDirection = point_direction(x, y, (mouse_x div t * t) + t/2, (mouse_y div t * t) + t/2)
    }
    fireBall.direction = fireDirection
    sound_play(soShoot)
    shootWait = shootCooldown
}

if hit &gt; 0
{
    hp -= hit
    if hitAnim
    {
        with (hitAnim)
        {
            instance_destroy()
        }
    }
            
    hitAnim = instance_create(x, y, oHit)
    hit = 0
}

if hitAnim
{
    hitAnim.x = x
    hitAnim.y = y
    if hitAnim.image_index = hitAnim.image_number-1
    {
        with (hitAnim)
        {
            instance_destroy()
        }
        hitAnim = -1
    }

}


lavaCooldown -= 1

if instance_place(x,y,oLava) &amp;&amp; lavaCooldown &lt;= 0
{
    hit += 1
    lavaCooldown = 10
    inputWait += 7
}

if hp &lt;= 0
{
    room_goto(rTown)
    sound_play(soDeath)
}

if debug
{
    if keyboard_check(ord("R"))
    {
        if keyboard_check(vk_shift)
        {
            game_restart()
        }
        else
        {
            room_restart()
        }
    }
    switch (string_char_at(keyboard_string,string_length(keyboard_string)))
    {
        case '1': room_goto(rRealm1); break;
        case '2': room_goto(rRealm2); break;
        case '3': room_goto(rRealm3); break;
        case '4': room_goto(rRealm4); break;
        case '5': room_goto(rRealm5); break;
        case '6': room_goto(rRealm6); break;
    }
    
}


dX = x div t * t
dY = y div t * t

if room = rTown
{
    if point_distance(x + t/2,y + t/2,oBook.x+t,oBook.y+t*1.5) &lt;= 40 &amp;&amp; bookPieces = 6
    {
        portalTime += 1
        portalLock = true
        if portalTime = 120
        {
            room_goto(rOuttro)
        }
        //show_message("You won! Test ending, please ignore!")
        //game_end()
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
